/*
 #####  Color Palette by Paletton.com
 #####  Palette URL: http://paletton.com/#uid=72Z0u0kllllaCvbfZqgqyghwabv


 *** Primary color:

 shade 0 = #28794C = rgb( 40,121, 76) = rgba( 40,121, 76,1)
 shade 1 = #76B190 = rgb(118,177,144) = rgba(118,177,144,1)
 shade 2 = #4B956B = rgb( 75,149,107) = rgba( 75,149,107,1)
 shade 3 = #105C31 = rgb( 16, 92, 49) = rgba( 16, 92, 49,1)
 shade 4 = #00411C = rgb(  0, 65, 28) = rgba(  0, 65, 28,1)

 *** Secondary color (1):
        
 shade 0 = #27556C = rgb( 39, 85,108) = rgba( 39, 85,108,1)
 shade 1 = #6C8D9D = rgb(108,141,157) = rgba(108,141,157,1)
 shade 2 = #467084 = rgb( 70,112,132) = rgba( 70,112,132,1)
 shade 3 = #113D52 = rgb( 17, 61, 82) = rgba( 17, 61, 82,1)
 shade 4 = #03283A = rgb(  3, 40, 58) = rgba(  3, 40, 58,1)

 *** Secondary color (2):

 shade 0 = #AA7539 = rgb(170,117, 57) = rgba(170,117, 57,1)
 shade 1 = #F8D2A6 = rgb(248,210,166) = rgba(248,210,166,1)
 shade 2 = #D1A169 = rgb(209,161,105) = rgba(209,161,105,1)
 shade 3 = #825016 = rgb(130, 80, 22) = rgba(130, 80, 22,1)
 shade 4 = #5C3100 = rgb( 92, 49,  0) = rgba( 92, 49,  0,1)

 *** Complement color:

 shade 0 = #AA5039 = rgb(170, 80, 57) = rgba(170, 80, 57,1)
 shade 1 = #F8B7A6 = rgb(248,183,166) = rgba(248,183,166,1)
 shade 2 = #D17F69 = rgb(209,127,105) = rgba(209,127,105,1)
 shade 3 = #822D16 = rgb(130, 45, 22) = rgba(130, 45, 22,1)
 shade 4 = #5C1300 = rgb( 92, 19,  0) = rgba( 92, 19,  0,1)


 #####  Generated by Paletton.com (c) 2002-2014
 */

var gameOver  = 0;
var canvasTag = document.createElement("canvas");
var divTag    = document.createElement("div");
var bodyTag   = document.body;

divTag.style.position	 = 'absolute';
divTag.style.left		 = 0;
divTag.style.top		 = 0;
divTag.style.margin		 = 0;
divTag.style.padding     = 0;

canvasTag.style.position = 'absolute';
canvasTag.style.left	 = 0;
canvasTag.style.top		 = 0;
canvasTag.style.margin	 = 0;
canvasTag.style.padding	 = 0;

bodyTag.appendChild(divTag);
divTag.appendChild(canvasTag);

var canvas = document.getElementsByTagName("canvas")[0];
var ctx	= this.canvas.getContext("2d");

canvas.width		 = window.innerWidth;
canvas.height		 = window.innerHeight;

function KeyPoint(dir, x, y) {
	this.direction = dir;
	this.x = x;
	this.y = y;
}

var KeyPoints = [];

var interval = 500; // interval between two scene drawings

//    this.canvas.onmousedown = Clickhandler.onCanvasClick;

var Gameboard = Gameboard || {};

Gameboard.width = canvas.width;
Gameboard.height= canvas.height;
Gameboard.blocksize = 32;
Gameboard.obstacles = [];
Gameboard.food = [];
Gameboard.initialObstaclesCount = 10;
Gameboard.initialFoodCount = 5;

var snakeCoordinates = [];

function Point(x, y) {
	this.x = x;
	this.y = y;
}

var Snake = Snake || {};

Snake.x = 0;
Snake.y = 0;
Snake.length = 12; // length of snake tail
Snake.color = "#D17F69";
Snake.direction = 39;
Snake.stepcount = 0;

var pause = 0;

function Obstacle(x, y) {
	this.x = x;
	this.y = y;
}

function Food(x, y) {
	this.x = x;
	this.y = y;
}

// North - 38, East - 39, South - 40, West - 37

function turnLeft(formerDirection) {
	var result = 0;
	switch (formerDirection) {
	case 37:
		result = 40;
		break;
	case 38:
		result = 37;
		break;
	case 39:
		result = 38;
		break;
	case 40:
		result = 39;
		break;
	default:
		result = -1;
	};
	return result;
}

function turnRight(formerDirection) {
	var result = 0;
	switch (formerDirection) {
	case 37:
		result = 38;
		break;
	case 38:
		result = 39;
		break;
	case 39:
		result = 40;
		break;
	case 40:
		result = 37;
		break;
	default:
		result = -1;
	};
	return result;
}

function initGameboard() {
	Gameboard.width = (canvas.width - (canvas.width % Gameboard.blocksize)) / Gameboard.blocksize;	
	Gameboard.height = (canvas.height - (canvas.height % Gameboard.blocksize)) / Gameboard.blocksize;
	for(var i = 0; i < Gameboard.initialObstaclesCount; i++) {
		var x = Math.floor(Math.random() * Gameboard.width);
		var y = Math.floor(Math.random() * Gameboard.height);
		Gameboard.obstacles.push(new Obstacle(x, y));
	}
	for(var i = 0; i < Gameboard.initialFoodCount; i++) {
		var x = Math.floor(Math.random() * Gameboard.width);
		var y = Math.floor(Math.random() * Gameboard.height);
		Gameboard.food.push(new Food(x, y));
	}
}

function initSnake() {
	Snake.x = Math.round(Gameboard.width/2);
	Snake.y = Math.round(Gameboard.height/2);
	Snake.length = 2;
	Snake.direction = 38;
	Snake.stepcount = 0;
	KeyPoints = [];
	KeyPoints.push(new KeyPoint(-1, Snake.x, Snake.y));
}

function keypressHandler(evt) {
	var myKey = 0;
	var oldDirection = Snake.direction;
	if (evt.charCode === 32) {
		pause = 1 - pause;
		if (pause === 1) {
			console.log("Pause...");
		} else {
			console.log("Continue...");
		}
	} else {
		if (evt.keyCode == 37) { // left pressed
			Snake.direction = turnLeft(Snake.direction);
			myKey = 1;
		} else if (evt.keyCode == 39) { // right pressed
			Snake.direction = turnRight(Snake.direction);
			myKey = 1;
		}
		if (myKey) {
			console.log("New direction = " + Snake.direction);		
			KeyPoints.push(new KeyPoint(oldDirection, Snake.x, Snake.y));
		}
	}
	evt.cancelBubble = true;
    if (evt.stopPropagation) {evt.stopPropagation();}
    if (evt.preventDefault) {evt.preventDefault();}
    return false;
};

document.body.addEventListener("keypress", keypressHandler);

function drawSnake() {

	ctx.fillStyle = Snake.color;

	var numKp = KeyPoints.length;
	var kpIdx = numKp;
	var currentSnakeLength = Snake.length;
	
	markSnake(Snake.x, Snake.y); // always mark snake head
	
	while (currentSnakeLength > 0 && kpIdx > 0) {

		var from_x;
		var from_y;
		
		if (kpIdx == numKp) {
			from_x = Snake.x;
			from_y = Snake.y;
		} else {
			from_x = KeyPoints[kpIdx].x;
			from_y = KeyPoints[kpIdx].y;
		}
		
		var to_x = KeyPoints[kpIdx-1].x;
		var to_y = KeyPoints[kpIdx-1].y;

		if (from_x === to_x) {
			if (from_y < to_y) {
				// top to bottom
				var dist = to_y - from_y;
				if (dist > currentSnakeLength) {
					dist = currentSnakeLength;
				}
				while (from_y < to_y && currentSnakeLength > 0) {
					from_y++;
					currentSnakeLength--;
					markSnake(from_x, from_y);
				}
			} else {
				// bottom to top
				var dist = from_y - to_y;
				if (dist > currentSnakeLength) {
					dist = currentSnakeLength;
				}
				while (from_y > to_y && currentSnakeLength > 0) {
					from_y--;
					currentSnakeLength--;
					markSnake(from_x, from_y);
				}				
			}
		} else { // from_y === to_y
			if (from_x < to_x) {
				// left to right
				var dist = to_x - from_x;
				if (dist > currentSnakeLength) {
					dist = currentSnakeLength;
				}
				while (from_x < to_x && currentSnakeLength > 0) {
					from_x++;
					currentSnakeLength--;
					markSnake(from_x, from_y);
				}
			} else {
				// right to left
				var dist = from_x - to_x;
				if (dist > currentSnakeLength) {
					dist = currentSnakeLength;
				}
				while (from_x > to_x && currentSnakeLength > 0) {
					from_x--;
					currentSnakeLength--;
					markSnake(from_x, from_y);
				}				
			}
		}
		kpIdx--;
	}

	var collision = collisionCheck();
	clearCoordinates();
	if (collision == 1) {
		gameOver = 1;
		alert("Die Schlange hat sich selbst in den Schwanz gebissen :-)");
	}
	
}

function collisionCheck() {
	var collision = 0;
	for (var i = 1; i < snakeCoordinates.length; i++) {
		if (Snake.x == snakeCoordinates[i].x && 
			Snake.y == snakeCoordinates[i].y) {
			collision = 1;
			break;
		}
	}
	return collision;
}

function pushCoordinates(x, y) {
	snakeCoordinates.push(new Point(x, y));
}

function clearCoordinates() { 
	snakeCoordinates = [];
}

/*
 Mark part of canvas belonging to gameboard field with coordinate (x,y).
*/

function markSnake(x, y) {
	pushCoordinates(x, y);
	var canvasX = Gameboard.blocksize * x;
	var canvasY = Gameboard.blocksize * y;
	ctx.beginPath();
	ctx.fillStyle = "#467084";
	ctx.fillRect(canvasX, canvasY, Gameboard.blocksize, Gameboard.blocksize);
	ctx.closePath();
}

function moveSnake() {

	var outOfBounds = checkBoardBoundaries();

	if (outOfBounds == 1) {
		alert ("Sie haben das Spielfeld verlassen. Das Spiel ist zu Ende.");
		gameOver = 1;
	}
	
	var collision = checkObstacles(Snake.x, Snake.y);

	if (collision) {
		alert ("Sie sind in ein Hindernis gekrochen!");
		gameOver = 1;
	}

	var foodFound = checkFood(Snake.x, Snake.y);

	if (foodFound) {
		Snake.length++;
	}
	
	if (outOfBounds + collision === 0) {
		if (Snake.direction == 38) {
			Snake.y -= 1;
		} else if (Snake.direction == 39) {
			Snake.x += 1;
		} else if (Snake.direction == 40) {
			Snake.y += 1;
		} else if (Snake.direction == 37) {
			Snake.x -= 1;
		}
	}
}

function checkObstacles(x, y) {
	var collision = 0;
	for(var i = 0; i < Gameboard.obstacles.length; i++) {
		var obstacle = Gameboard.obstacles[i];
		if (obstacle.x == x && obstacle.y == y) {
			collision = 1;
			break;
		}
	}
	return collision;
}

function checkFood(x, y) {
	if (Gameboard.food.length === 0) {
		gameOver = 1;
		alert("Gewonnen!");
	}
	
	var found = 0;
	for(var i = 0; i < Gameboard.food.length; i++) {
		var food = Gameboard.food[i];
		if (food.x == x && food.y == y) {
			found = 1;
			Gameboard.food.splice(i, 1);
			break;
		}
	}
	return found;
}

function checkBoardBoundaries() {
	var outOfBounds = 0;
	if (Snake.x < 0 || Snake.x >= Gameboard.width || Snake.y < 0 || Snake.y >= Gameboard.height) {
		outOfBounds = 1;
	}
	return outOfBounds;
}

function drawGameboard() {
	for(var i = 0; i < Gameboard.width; i++) {
		for(var j = 0; j < Gameboard.height; j++) {
			ctx.beginPath();
			ctx.lineWidth=1;
			ctx.strokeStyle="#113D52";
			ctx.rect(i * Gameboard.blocksize, j * Gameboard.blocksize, Gameboard.blocksize, Gameboard.blocksize);
			ctx.stroke();
			ctx.closePath();
		}
	}
}

function drawObstacles() {
	for(var i = 0; i < Gameboard.obstacles.length; i++) {
		ctx.fillStyle = "#6C8D9D";
		ctx.fillRect(Gameboard.obstacles[i].x * Gameboard.blocksize, Gameboard.obstacles[i].y * Gameboard.blocksize, Gameboard.blocksize, Gameboard.blocksize);
	}
}

function drawFood() {
	for(var i = 0; i < Gameboard.food.length; i++) {
		ctx.fillStyle = "#D1A169";
		ctx.fillRect(Gameboard.food[i].x * Gameboard.blocksize, Gameboard.food[i].y * Gameboard.blocksize, Gameboard.blocksize, Gameboard.blocksize);
	}
}

function drawScene() {
	if (gameOver === 1) {
		window.clearInterval(intervalId);
		return;
	}
	// eval state and adjust settings for next iteration
	if (pause === 0) {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
		ctx.clearRect ( 0 , 0 , canvas.width , canvas.height );
		ctx.fillStyle = "#27556C";
		ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);

		drawSnake();
		drawObstacles();
		drawFood();
		drawGameboard();

		if (Snake.stepcount != 0 && ( Snake.stepcount % 100 === 0 ) ) {
			Snake.length+=2;
			interval-=10;
			window.clearInterval(intervalId);
			intervalId = window.setInterval(drawScene, interval);
		}

		moveSnake();
		Snake.stepcount++;
	}
}

initGameboard();

initSnake();

var intervalId = window.setInterval(drawScene, interval);

